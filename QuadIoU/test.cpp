#include "quad_iou.cpp"
#include "helpers.cpp"

using namespace std;

int main(){
    vector< vector<Quadrilateral> > testQuads = {
        {{{ {0, 0}, {300, 0}, {300, 300}, {0, 300} }}, {{ {0, 0}, {150, 0}, {150, 150}, {0, 150} }}},
        {{{ {0, 0}, {300, 0}, {300, 300}, {0, 300} }}, {{ {500, 500}, {600, 600}, {700, 750}, {600, 750} }}},
        {{{ {200, 200}, {500, 200}, {500, 500}, {200, 500} }}, {{ {300, 300}, {500, 200}, {500, 500}, {200, 500} }}},
        {{{ {0, 0}, {300, 0}, {300, 300}, {0, 300} }}, {{ {10, 10}, {20, 10}, {20, 20}, {10, 20} }}},
        {{{ {0, 0}, {300, 0}, {300, 300}, {0, 300} }}, {{ {10, 10}, {20, 10}, {20, 20}, {10, 20} }}},
        {{{ {0, 0}, {350, 0}, {350, 350}, {0, 350} }}, {{ {15, 15}, {25, 15}, {25, 25}, {15, 25} }}},
        {{{ {0, 0}, {400, 0}, {400, 400}, {0, 400} }}, {{ {30, 30}, {60, 30}, {60, 60}, {30, 60} }}},
        {{{ {0, 0}, {450, 0}, {450, 450}, {0, 450} }}, {{ {40, 40}, {80, 40}, {80, 80}, {40, 80} }}},
        {{{ {0, 0}, {500, 0}, {500, 500}, {0, 500} }}, {{ {50, 50}, {100, 50}, {100, 100}, {50, 100} }}},
        {{{ {0, 0}, {550, 0}, {550, 550}, {0, 550} }}, {{ {5, 5}, {15, 5}, {15, 15}, {5, 15} }}},
        {{{ {0, 0}, {600, 0}, {600, 600}, {0, 600} }}, {{ {20, 20}, {40, 20}, {40, 40}, {20, 40} }}},
        {{{ {0, 0}, {650, 0}, {650, 650}, {0, 650} }}, {{ {25, 25}, {50, 25}, {50, 50}, {25, 50} }}},
        {{{ {0, 0}, {700, 0}, {700, 700}, {0, 700} }}, {{ {10, 10}, {30, 10}, {30, 30}, {10, 30} }}},
        {{{ {0, 0}, {750, 0}, {750, 750}, {0, 750} }}, {{ {35, 35}, {70, 35}, {70, 70}, {35, 70} }}},
        {{{ {0, 0}, {800, 0}, {800, 800}, {0, 800} }}, {{ {45, 45}, {90, 45}, {90, 90}, {45, 90} }}},
        {{{ {0, 0}, {850, 0}, {850, 850}, {0, 850} }}, {{ {55, 55}, {110, 55}, {110, 110}, {55, 110} }}},
        {{{ {0, 0}, {900, 0}, {900, 900}, {0, 900} }}, {{ {60, 60}, {120, 60}, {120, 120}, {60, 120} }}},
        {{{ {0, 0}, {950, 0}, {950, 950}, {0, 950} }}, {{ {65, 65}, {130, 65}, {130, 130}, {65, 130} }}},
        {{{ {0, 0}, {1000, 0}, {1000, 1000}, {0, 1000} }}, {{ {70, 70}, {140, 70}, {140, 140}, {70, 140} }}},
        {{{ {0, 0}, {1050, 0}, {1050, 1050}, {0, 1050} }}, {{ {75, 75}, {150, 75}, {150, 150}, {75, 150} }}},
        {{{ {0, 0}, {1100, 0}, {1100, 1100}, {0, 1100} }}, {{ {80, 80}, {160, 80}, {160, 160}, {80, 160} }}},
        {{{ {0, 0}, {1150, 0}, {1150, 1150}, {0, 1150} }}, {{ {85, 85}, {170, 85}, {170, 170}, {85, 170} }}},
        {{{ {0, 0}, {350, 0}, {350, 350}, {0, 350} }}, {{ {15, 15}, {25, 15}, {25, 25}, {15, 25} }}},
        {{{ {0, 0}, {400, 0}, {400, 400}, {0, 400} }}, {{ {30, 30}, {60, 30}, {60, 60}, {30, 60} }}},
        {{{ {0, 0}, {450, 0}, {450, 450}, {0, 450} }}, {{ {40, 40}, {80, 40}, {80, 80}, {40, 80} }}},
        {{{ {0, 0}, {500, 0}, {500, 500}, {0, 500} }}, {{ {50, 50}, {100, 50}, {100, 100}, {50, 100} }}},
        {{{ {0, 0}, {550, 0}, {550, 550}, {0, 550} }}, {{ {5, 5}, {15, 5}, {15, 15}, {5, 15} }}},
        {{{ {0, 0}, {600, 0}, {600, 600}, {0, 600} }}, {{ {20, 20}, {40, 20}, {40, 40}, {20, 40} }}},
        {{{ {0, 0}, {650, 0}, {650, 650}, {0, 650} }}, {{ {25, 25}, {50, 25}, {50, 50}, {25, 50} }}},
        {{{ {0, 0}, {700, 0}, {700, 700}, {0, 700} }}, {{ {10, 10}, {30, 10}, {30, 30}, {10, 30} }}},
        {{{ {0, 0}, {750, 0}, {750, 750}, {0, 750} }}, {{ {35, 35}, {70, 35}, {70, 70}, {35, 70} }}},
        {{{ {0, 0}, {800, 0}, {800, 800}, {0, 800} }}, {{ {45, 45}, {90, 45}, {90, 90}, {45, 90} }}},
        {{{ {0, 0}, {850, 0}, {850, 850}, {0, 850} }}, {{ {55, 55}, {110, 55}, {110, 110}, {55, 110} }}},
        {{{ {0, 0}, {900, 0}, {900, 900}, {0, 900} }}, {{ {60, 60}, {120, 60}, {120, 120}, {60, 120} }}},
        {{{ {0, 0}, {950, 0}, {950, 950}, {0, 950} }}, {{ {65, 65}, {130, 65}, {130, 130}, {65, 130} }}},
        {{{ {0, 0}, {1000, 0}, {1000, 1000}, {0, 1000} }}, {{ {70, 70}, {140, 70}, {140, 140}, {70, 140} }}},
        {{{ {0, 0}, {1050, 0}, {1050, 1050}, {0, 1050} }}, {{ {75, 75}, {150, 75}, {150, 150}, {75, 150} }}},
        {{{ {0, 0}, {1100, 0}, {1100, 1100}, {0, 1100} }}, {{ {80, 80}, {160, 80}, {160, 160}, {80, 160} }}},
        {{{ {20, 200}, {200, 20}, {240, 130}, {150, 400} }}, {{ {130, 40}, {220, 300}, {220, 375}, {130, 215}}}},
        {{{ {240, 130}, {20, 200}, {200, 20}, {150, 400} }}, {{ {130, 40}, {220, 300}, {220, 375}, {130, 215}}}},
        {{{ {200, 20}, {20, 200}, {150, 400}, {240, 130} }}, {{ {130, 40}, {220, 300}, {220, 375}, {130, 215} }}}
        // MORE TEST CASES TO COME./
    };
    for (int i = 0; i < testQuads.size(); i++) {
        // cout << i << endl;
        auto& quad0 = testQuads[i][0];
        auto& quad1 = testQuads[i][1];
        vector<Point> polygon_points;
        sortPointsClockwise(quad0);
        sortPointsClockwise(quad1);

        polygon_points = findIntersectionPoints(quad0, quad1);
        vector<Point> inside_points = findPointInside(quad0, quad1);
        // Extend polygon points with inside points
        polygon_points.insert(polygon_points.end(), inside_points.begin(), inside_points.end());
        sortPointsClockwise(polygon_points); //
        double iou;
        if (polygon_points.size() == 0) {
            iou = 0.0;
        } else {
            iou = polygonArea(polygon_points) / (polygonArea(quad0) + polygonArea(quad1) - polygonArea(polygon_points));
            cout << iou << endl;
        }
        // cout << iou << endl;
    }
    return 0;
}